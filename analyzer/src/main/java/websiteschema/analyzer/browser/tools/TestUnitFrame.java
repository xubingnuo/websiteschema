/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TestingFrame.java
 *
 * Created on Jan 8, 2012, 2:00:03 PM
 */
package websiteschema.analyzer.browser.tools;

import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import org.w3c.dom.Document;
import websiteschema.analyzer.context.BrowserContext;
import websiteschema.crawler.Crawler;
import websiteschema.crawler.browser.BrowserWebCrawler;
import websiteschema.crawler.fb.FBUnitExtractor;
import websiteschema.crawler.htmlunit.HtmlUnitWebCrawler;
import websiteschema.utils.PojoMapper;

/**
 *
 * @author ray
 */
public class TestUnitFrame extends javax.swing.JFrame {

    BrowserContext context;
    String siteId;

    /**
     * Creates new form TestingFrame
     */
    public TestUnitFrame() {
        initComponents();

        int screenWidth = ((int) java.awt.Toolkit.getDefaultToolkit().getScreenSize().width);
        int screenHeight = ((int) java.awt.Toolkit.getDefaultToolkit().getScreenSize().height);
        int sizeWidth = this.getWidth();
        int sizeHeight = this.getHeight();
        this.setLocation((screenWidth - sizeWidth) / 2, (screenHeight - sizeHeight) / 2);

        this.resultArea.setLineWrap(this.wrapLineCheckBox.isSelected());
        this.setTitle("Unit测试抽取");
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jLabel3 = new javax.swing.JLabel();
        unitXPathField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        crawlerCombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        wrapLineCheckBox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        pointsJSONArea = new javax.swing.JTextArea();
        startButton = new javax.swing.JButton();
        startButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jToolBar1.setRollover(true);

        jLabel3.setText("Unit Path:");
        jToolBar1.add(jLabel3);
        jToolBar1.add(unitXPathField);

        jLabel1.setText("采集器:");
        jToolBar1.add(jLabel1);

        crawlerCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SimpleHTTPCrawler", "HtmlUnitWebCrawler", "BrowserWebCrawler" }));
        jToolBar1.add(crawlerCombo);

        jLabel2.setText("自动换行:");
        jToolBar1.add(jLabel2);

        wrapLineCheckBox.setSelected(true);
        wrapLineCheckBox.setFocusable(false);
        wrapLineCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        wrapLineCheckBox.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        wrapLineCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wrapLineCheckBoxActionPerformed(evt);
            }
        });
        jToolBar1.add(wrapLineCheckBox);

        resultArea.setColumns(20);
        resultArea.setRows(5);
        resultArea.setToolTipText("结果展示区域");
        jScrollPane1.setViewportView(resultArea);

        pointsJSONArea.setColumns(20);
        pointsJSONArea.setRows(5);
        pointsJSONArea.setToolTipText("JSON 输入区");
        jScrollPane2.setViewportView(pointsJSONArea);

        startButton.setText("开始抽取");
        startButton.setFocusable(false);
        startButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        startButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        startButton1.setText("帮助");
        startButton1.setFocusable(false);
        startButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        startButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        startButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 634, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 634, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 634, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(startButton1)
                .addGap(29, 29, 29))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(startButton)
                    .addComponent(startButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        // TODO add your handling code here:
        new Thread(new FooThread()).start();
    }//GEN-LAST:event_startButtonActionPerformed

    private void wrapLineCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wrapLineCheckBoxActionPerformed
        // TODO add your handling code here:
        this.pointsJSONArea.setLineWrap(this.wrapLineCheckBox.isSelected());
        this.pointsJSONArea.updateUI();
    }//GEN-LAST:event_wrapLineCheckBoxActionPerformed

    private void startButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButton1ActionPerformed
        // TODO add your handling code here:
        UnitHelpDialog helpDlg = new UnitHelpDialog(this, false);
        helpDlg.setLocation(350 + this.getX(), 350 + this.getY());
        helpDlg.setVisible(true);
    }//GEN-LAST:event_startButton1ActionPerformed

//    private boolean isJavaScriptEnabled() {
//        context.getConsole().log("JavaScriptEnabled: " + this.javaScriptEnabledCheckBox.isSelected());
//        this.resultArea.append("JavaScriptEnabled: " + this.javaScriptEnabledCheckBox.isSelected() + "\n");
//        return this.javaScriptEnabledCheckBox.isSelected();
//    }
    public BrowserContext getContext() {
        return context;
    }

    public void setContext(BrowserContext context) {
        this.context = context;
    }

    public String getSiteId() {
        return siteId;
    }

    public void setSiteId(String siteId) {
        this.siteId = siteId;
    }

    class FooThread implements Runnable {

        @Override
        public void run() {
            start();
        }
    };

    private Document crawl(String url) {
        if (null != url) {
            Document source = null;//(Document) context.getBrowser().getW3CDocument();
            this.setTitle("Unit 抽取: " + url);
            this.resultArea.setText("开始采集：" + url + "\n");
            context.getConsole().log("开始采集：" + url);
            Crawler crawler = null;
            if ("HtmlUnitWebCrawler".equals(getCrawler())) {
                HtmlUnitWebCrawler huwc = new HtmlUnitWebCrawler();
                huwc.setJavaScriptEnabled(true);
                crawler = huwc;
            } else if ("BrowserWebCrawler".equals(getCrawler())) {
                BrowserWebCrawler bwc = new BrowserWebCrawler();
                bwc.setAllowPopupWindow(false);
                crawler = bwc;
            } else {
                crawler = new websiteschema.crawler.SimpleHttpCrawler();
            }
            String userAgent = BrowserContext.getConfigure().getProperty("Browser", "User-Agent");
            if (null != userAgent) {
                crawler.addHeader("User-Agent", userAgent);
            }
            long t1 = System.currentTimeMillis();
            Document docs[] = crawler.crawl(url);
            long t2 = System.currentTimeMillis();
            context.getConsole().log("采集结束，耗时：" + (t2 - t1));
            this.resultArea.append("采集结束，耗时：" + (t2 - t1) + "\n");
            source = null != docs ? docs[0] : (Document) context.getBrowser().getW3CDocument();
            return source;
        } else {
            return null;
        }
    }

    private Object str2json(String json_str) {
        Object obj_JSON = null;
        try {
            if (json_str.startsWith("[")) {
                obj_JSON = PojoMapper.fromJson(json_str, List.class);
            } else if (json_str.startsWith("{")) {
                obj_JSON = PojoMapper.fromJson(json_str, Map.class);
            } else {
                obj_JSON = json_str;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            obj_JSON = json_str;
        }
        return obj_JSON;
    }

    private void start() {
        this.startButton.setEnabled(false);
        try {
            String url = context.getBrowser().getURL();
            Document source = crawl(url);
            if (null != source) {
                FBUnitExtractor ue = new FBUnitExtractor();
                String pointsJSON = PojoMapper.toJson(str2json(this.pointsJSONArea.getText()));
                List<Map<String, String>> conf = PojoMapper.fromJson(pointsJSON, List.class);
                Document doc = source;
                ue.doc = doc;
                ue.url = url;
                ue.unitXPath = this.unitXPathField.getText().trim();
                ue.points = conf;
                ue.extractUnits();
                ue.printUnits();
                final int rowCount = ue.table.size();
                String displayStr = "";
                for (int i = 0; i < rowCount; ++i) {
                    Map<String, String> row = ue.table.get(i);
                    displayStr += row + "\n";
                }
                this.resultArea.setText(displayStr);
                JOptionPane.showMessageDialog(this, "抽取结束！");
            } else {
                JOptionPane.showMessageDialog(this, "抽取页面异常");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            this.startButton.setEnabled(true);
        }
    }

    private String getCrawler() {
        return this.crawlerCombo.getSelectedItem().toString();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox crawlerCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextArea pointsJSONArea;
    private javax.swing.JTextArea resultArea;
    private javax.swing.JButton startButton;
    private javax.swing.JButton startButton1;
    private javax.swing.JTextField unitXPathField;
    private javax.swing.JCheckBox wrapLineCheckBox;
    // End of variables declaration//GEN-END:variables
}
